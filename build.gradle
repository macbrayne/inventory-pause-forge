//file:noinspection SpellCheckingInspection
import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.48'
    id 'net.neoforged.gradle.mixin' version '7.0.48'
    id "com.modrinth.minotaur" version "2.+"
    id "net.darkhax.curseforgegradle" version "1.1.+"
}

group = project.maven_group
version = "mc${project.minecraft_version}_v${project.mod_version}"

repositories {
    mavenLocal()
}

base {
    archivesName = project.mod_id
}
java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 17 to end users, so your mod should target Java 17.

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        dependencies {
            runtime('com.moandjiezana.toml:toml4j:0.7.2') {
                transitive(false)
            }
        }

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

jarJar.enable()

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neoforge_version}"

    compileOnly 'org.jetbrains:annotations:24.1.0'

    // Mod Dependencies
    implementation('com.moandjiezana.toml:toml4j:0.7.2') {
        transitive(false)
    }
    jarJar('com.moandjiezana.toml:toml4j:[0.7.2]') {
        transitive(false)
    }
}

tasks.build.dependsOn tasks.jarJar


// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "inventorypause",
                "Specification-Vendor"    : "umollu, macbrayne",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.mod_version,
                "Implementation-Vendor"   : "umollu, macbrayne",
                "MixinConfigs"            : "inventorypause.mixins.json",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.modrinth.onlyIf {
    System.getenv("MODRINTH")
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

modrinth { // Make sure it runs after build!
    token = System.getenv("MODRINTH") // An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
    projectId = 'F39sgYmY'
    versionName = "Inventory Pause ${project.mod_version} (${project.minecraft_version})" // The version of the mod to upload.
    versionNumber = "${project.mod_version}" // Will fail if Modrinth has this version already
    changelog = System.getenv("CHANGELOG")
    versionType = "RELEASE"
    syncBodyFrom = rootProject.file("README.md").text
    // On fabric, use 'remapJar' instead of 'jar'
    uploadFile = jar.outputs.getFiles().asPath.replace(".jar", "-all.jar") // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
    gameVersions = [project.minecraft_version] // Call this multiple times to add multiple game versions. There are tools that can help you generate the list of versions
    loaders = ['neoforge']
}

tasks.register('curseforge', TaskPublishCurseForge) {
    // This token is used to authenticate with CurseForge. It should be handled
    // with the same level of care and security as your actual password. You
    // should never share your token with an untrusted source or publish it
    // publicly to GitHub or embed it within a project. The best practice is to
    // store this token in an environment variable or a build secret.
    apiToken = System.getenv("CURSEFORGE")

    // Tells CurseForgeGradle to publish the output of the jar task. This will
    // return a UploadArtifact object that can be used to further configure the
    // file.
    def mainFile = upload("495153", jar.outputs.getFiles().asPath.replace(".jar", "-all.jar"))
    mainFile.changelog = System.getenv("CHANGELOG")
    mainFile.changelogType = "markdown"
    mainFile.displayName = "Inventory Pause v${project.mod_version} (${project.minecraft_version})"
    mainFile.releaseType = "release"
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}